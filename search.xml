<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Github practical skills</title>
      <link href="/2020/08/06/github-practical-skills/"/>
      <url>/2020/08/06/github-practical-skills/</url>
      
        <content type="html"><![CDATA[<h2 id="set-up-Github"><a href="#set-up-Github" class="headerlink" title="set up Github"></a>set up Github</h2><ul><li>edit <code>.gitconfig</code>:<pre><code>[user]      email = myemail      name = myname[credential "https://github.com"]      username = myusername      helper = store</code></pre></li><li>edit <code>.git-credentials</code>:<pre><code>https://&lt;YOU&gt;:&lt;TOKEN&gt;@github.com</code></pre><h2 id="basic-steps"><a href="#basic-steps" class="headerlink" title="basic steps"></a>basic steps</h2><pre><code>git clone gitrepogit statusgit add . #add allgit add hello/* #Git add to subdirectorygit commit -m "commit message"git pull origin mastergit push origin master</code></pre><h2 id="set-remote-branches"><a href="#set-remote-branches" class="headerlink" title="set remote branches"></a>set remote branches</h2>After fork a repository, we can set the push url, so we can push to our repo and pull from the orginal repo.<br>check the remote branches:<br><code>git remote -v</code><br>set the push url:<br><code>git remote set-url --push origin mmyrepo</code><br>Check set correctly:<br><code>git remote -v</code></li></ul><h2 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h2><p>Before submit PR, it’s always good to rebase and squash all the commits into one commit, so it’s more convenient to be reviewed.<br><code>git rebase -i HEAD~8</code> #combine the last 8 commits as one commit<br>use editor, like vim to edit:<br>  :i -&gt; edit the rebase, pick the first one, and s the left<br>  :wq -&gt; save and exit<br>keep those commits message to <code>rebase</code>, and others to <code>squash</code> or <code>s</code><br>If we didn’t get into the commit message automatically, we can continue:<br><code>git rebase --continue</code><br>  :i -&gt; edit the whole commit mesage<br>  :wq -&gt; save and exit<br>Keep those required message.<br>If we want to abort:<br><code>git rebase --abort</code></p><h2 id="Discard-all-local-changes"><a href="#Discard-all-local-changes" class="headerlink" title="Discard all local changes"></a>Discard all local changes</h2><p>Discard all local changes, but save them for possible re-use later: <code>git stash</code><br>Discarding local changes (permanently) to a file:<br><code>git checkout -- &lt;file&gt;</code><br>Discard all local changes to all files permanently:<br><code>git reset --hard</code></p><h2 id="Sync-forked-repo-to-update"><a href="#Sync-forked-repo-to-update" class="headerlink" title="Sync forked repo to update"></a>Sync forked repo to update</h2><p>If forked repo is behind the orginal repo, we need to sync:</p><pre><code>git remote add upstream https://github.com/upstream/repo.gitgit pull --rebase upstream mastergit push --force-with-lease origin master</code></pre><h2 id="amend-commits"><a href="#amend-commits" class="headerlink" title="amend commits"></a>amend commits</h2><p>If we need to amend our commits:<br><code>git commit --amend</code></p><p>Update more later.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Commands</title>
      <link href="/2020/07/23/linux-commands/"/>
      <url>/2020/07/23/linux-commands/</url>
      
        <content type="html"><![CDATA[<h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><p>search for pattern in filename<br><code>grep pattern filename</code><br>-i: captial insensitive<br>-r: search all the file in the directory<br><code>grep -r admin /etc/</code></p><h2 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h2><pre><code>$ wc demo.txt7459   15915  398400 demo.txtlines  words  bytes行数    单词数  字符数    </code></pre><h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><p><code>sed 's/ /-/g' example.txt</code><br>replace all the <code>space</code> with <code>-</code><br>Hello This is a Test 1 2 3 4 -&gt; Hello-This-is-a-Test-1-2-3-4</p><p><code>sed 's/[0-9]/d/g' example.txt</code><br>replace all the numbers with <code>d</code><br>Hello This is a Test 1 2 3 4 -&gt; Hello This is a Test d d d d</p><h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><p><code>sort example.txt</code><br>example.txt</p><pre><code>fbcgaed</code></pre><p>sort example.txt</p><pre><code>abcdefg</code></pre><p><code>sort example.txt | sort -R</code> randomly<br><code>sort example.txt | uniq</code> show unique lines<br><code>sort example.txt | uniq -c</code> show unique lines and times</p><h2 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h2><p><code>cut -d " " -f2,7,9 example.txt</code> show the 2,7,9 words connected with “ “<br>red riding hood went to the park to play -&gt; riding park play</p><h2 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h2><p><code>echo -ne "Hello\nWorld\n"</code><br>“\n” output<br>Hello<br>World</p><h2 id="fmt"><a href="#fmt" class="headerlink" title="fmt"></a>fmt</h2><p><code>cat example.txt | fmt -w 20</code>: print each line with 20 words</p><h2 id="tr"><a href="#tr" class="headerlink" title="tr"></a>tr</h2><p>cat example.txt | tr ‘a-z’ ‘A-Z’: change a-z -&gt; A-Z<br><code>cat example.txt | tr ' ' '\n'</code>: change ‘ ‘ -&gt; ‘\n’</p><h2 id="nl"><a href="#nl" class="headerlink" title="nl"></a>nl</h2><p><code>nl -s". " example.txt</code>show the number of line</p><pre><code> 1. Lorem ipsum 2. dolor sit amet, 3. consetetur 4. sadipscing elitr, 5. sed diam nonumy 6. eirmod tempor 7. invidunt ut labore 8. et dolore magna 9. aliquyam erat, sed10. diam voluptua. At11. vero eos et12. accusam et justo13. duo dolores et ea14. rebum. Stet clita15. kasd gubergren,16. no sea takimata17. sanctus est Lorem18. ipsum dolor sit19. amet.</code></pre><h2 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h2><p>change password</p><h2 id="date"><a href="#date" class="headerlink" title="date"></a>date</h2><p>show current date</p><h2 id="cal"><a href="#cal" class="headerlink" title="cal"></a>cal</h2><p>show the calendar for this month</p><h2 id="finger"><a href="#finger" class="headerlink" title="finger"></a>finger</h2><p><code>finger username</code> display the info of the user</p><h2 id="uptime"><a href="#uptime" class="headerlink" title="uptime"></a>uptime</h2><p>show the running time</p><h2 id="uname"><a href="#uname" class="headerlink" title="uname"></a>uname</h2><p><code>uname -a</code> show kernel info</p><h2 id="df"><a href="#df" class="headerlink" title="df"></a>df</h2><p>show usage of disk</p><h2 id="du"><a href="#du" class="headerlink" title="du"></a>du</h2><p><code>du filename</code> show the size of directory and file<br>-s: only show the total size</p><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><p><code>ps -u yourusername</code> show the processes</p><h2 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h2><p><code>kill PID</code></p><h2 id="killall"><a href="#killall" class="headerlink" title="killall"></a>killall</h2><p><code>killall processname</code></p><h2 id="top"><a href="#top" class="headerlink" title="top"></a>top</h2><p>show current process</p><h2 id="bg"><a href="#bg" class="headerlink" title="bg"></a>bg</h2><h2 id="fg"><a href="#fg" class="headerlink" title="fg"></a>fg</h2><h2 id="dig"><a href="#dig" class="headerlink" title="dig"></a>dig</h2><p><code>dig domain</code> dig the info of the domain</p><h2 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h2><p><code>wget file</code> download the file</p><h2 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h2><pre><code>${varname:-word}    # 如果varname存在且不为null，则返回其值; 否则返回word${varname:=word}    # 如果varname存在且不为null，则返回其值;否则设置它，然后返回其值${varname:+word}    # 如果varname存在并且不为null，返回word; 否则返回null ${varname:offset:length}    # 执行子字符串扩展。它返回$ varname的子字符串，从offset开始，最多为length的字符2.2 String Substitution</code></pre><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><pre><code>${variable#pattern}         # if the pattern matches the beginning of the variable's value, delete the shortest part that matches and return the rest${variable##pattern}        # if the pattern matches the beginning of the variable's value, delete the longest part that matches and return the rest${variable%pattern}         # if the pattern matches the end of the variable's value, delete the shortest part that matches and return the rest${variable%%pattern}        # if the pattern matches the end of the variable's value, delete the longest part that matches and return the rest${variable/pattern/string}  # the longest match to pattern in variable is replaced by string. Only the first match is replaced${variable//pattern/string} # the longest match to pattern in variable is replaced by string. All matches are replaced${#varname}     # returns the length of the value of the variable as a character string</code></pre><h2 id="expression"><a href="#expression" class="headerlink" title="expression"></a>expression</h2><pre><code>statement1 &amp;&amp; statement2  # 两边的条件都为truestatement1 || statement2  # 其中一边为truestr1=str2       # str1 匹配 str2str1!=str2      # str1 不匹配 str2str1&lt;str2       # str1 是否小于 str2str1&gt;str2       # str1 是否大于 str2-n str1         # str1 不为空(长度大于 0)-z str1         # str1 为空(长度为 0)-a file         # 文件存在 -d file         # 文件存在，是一个目录 -e file         # 文件存在; 相同的-a -f file         # 文件存在，是一个常规文件（即不是目录或其他特殊类型的文件） -r file         # 你有读权限 -r file         # 文件存在，不为空 -w file         # 你有写权限 -x file         # 你有文件的执行权限file1 -nt file2     # file1 is newer than file2file1 -ot file2     # file1 is older than file2-lt     # 小于 -le     # 小于或等于 -eq     # 等于-ge     # 大于或等于 -gt     # 大于-ne     # 不等于</code></pre><p>Ref:<br><a href="https://www.cnblogs.com/savorboard/p/bash-guide.html" target="_blank" rel="noopener">https://www.cnblogs.com/savorboard/p/bash-guide.html</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hack on Fedora CoreOS on AWS EC2</title>
      <link href="/2020/07/15/hack-on-fedora-on-aws-ec2/"/>
      <url>/2020/07/15/hack-on-fedora-on-aws-ec2/</url>
      
        <content type="html"><![CDATA[<h2 id="Build-image-with-COSA"><a href="#Build-image-with-COSA" class="headerlink" title="Build image with COSA"></a>Build image with COSA</h2><pre><code>chmod +x ./cosa &amp;&amp; ./cosacosa init https://github.com/coreos/fedora-coreos-config.gitcosa fetchcosa buildcosa buildextend-aws --upload</code></pre><hr><h2 id="Upload-vmdk-file-to-s3"><a href="#Upload-vmdk-file-to-s3" class="headerlink" title="Upload vmdk file to s3"></a>Upload vmdk file to s3</h2><p>upload built latest fedora coreos image to S3<br>create a s3 bucket name “images” manually<br><code>aws s3 cp rhcos.raw s3://images</code></p><h2 id="Import-Snapshot"><a href="#Import-Snapshot" class="headerlink" title="Import Snapshot"></a>Import Snapshot</h2><p><code>aws ec2 import-snapshot --description "My dev fcos" --disk-container="file://{fcosdir}/buildfcos/fcos.json"</code></p><h2 id="Check-Status"><a href="#Check-Status" class="headerlink" title="Check Status"></a>Check Status</h2><p><code>aws ec2 describe-import-snapshot-tasks --import-task-ids import-snap-1234567890abcdef0</code></p><h2 id="Create-Image"><a href="#Create-Image" class="headerlink" title="Create Image"></a>Create Image</h2><p>Create Snapshot<br>Ref:<br><a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html#creating-launching-ami-from-snapshot" target="_blank" rel="noopener">https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html#creating-launching-ami-from-snapshot</a></p><h2 id="Register-Image"><a href="#Register-Image" class="headerlink" title="Register Image"></a>Register Image</h2><p>AMIs: Register new AMI<br><del>(commands tbc)</del><br>aws ec2 register-image –image-location fcos20200610/fedora-coreos-32.20200611.dev.0-aws.x86_64.vmdk –name “MyFCOS”</p><h2 id="launch-ec2-instance"><a href="#launch-ec2-instance" class="headerlink" title="launch ec2 instance"></a>launch ec2 instance</h2><p>Chose the created image to build ec2 instance.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fedora CoreOS </tag>
            
            <tag> CoreOS Assembler </tag>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Install Openshift Cluster on AWS</title>
      <link href="/2020/07/14/install-openshift-cluster-on-aws/"/>
      <url>/2020/07/14/install-openshift-cluster-on-aws/</url>
      
        <content type="html"><![CDATA[<h1 id="Install-Openshift-Cluster-on-AWS"><a href="#Install-Openshift-Cluster-on-AWS" class="headerlink" title="Install Openshift Cluster on AWS"></a>Install Openshift Cluster on AWS</h1><h2 id="Install-the-AWS-CLI-tools-Optional"><a href="#Install-the-AWS-CLI-tools-Optional" class="headerlink" title="Install the AWS CLI tools(Optional):"></a>Install the AWS CLI tools(Optional):</h2><h3 id="Download-the-latest-AWS-Command-Line-Interface"><a href="#Download-the-latest-AWS-Command-Line-Interface" class="headerlink" title="Download the latest AWS Command Line Interface"></a>Download the latest AWS Command Line Interface</h3><pre><code>sudo -icurl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"unzip awscli-bundle.zip</code></pre><h3 id="Install-the-AWS-CLI-into-bin-aws"><a href="#Install-the-AWS-CLI-into-bin-aws" class="headerlink" title="Install the AWS CLI into /bin/aws"></a>Install the AWS CLI into /bin/aws</h3><p><code>./awscli-bundle/install -i /usr/local/aws -b /bin/aws</code></p><h3 id="Validate-the-AWS-CLI-works"><a href="#Validate-the-AWS-CLI-works" class="headerlink" title="Validate the AWS CLI works"></a>Validate the AWS CLI works</h3><p><code>aws --version</code></p><h3 id="Clean-up-downloaded-files"><a href="#Clean-up-downloaded-files" class="headerlink" title="Clean up downloaded files"></a>Clean up downloaded files</h3><p><code>rm -rf /root/awscli-bundle /root/awscli-bundle.zip</code></p><h2 id="Preparation-before-Run-OpenShift-Installer"><a href="#Preparation-before-Run-OpenShift-Installer" class="headerlink" title="Preparation before Run OpenShift Installer:"></a>Preparation before Run OpenShift Installer:</h2><h3 id="Get-the-OpenShift-installer-binary"><a href="#Get-the-OpenShift-installer-binary" class="headerlink" title="Get the OpenShift installer binary:"></a>Get the OpenShift installer binary:</h3><pre><code>OCP_VERSION=4.4.3wget https://mirror.openshift.com/pub/openshift-v4/clients/ocp/${OCP_VERSION}/openshift-install-linux-${OCP_VERSION}.tar.gztar zxvf openshift-install-linux-${OCP_VERSION}.tar.gz -C /usr/binrm -f openshift-install-linux-${OCP_VERSION}.tar.gz /usr/bin/README.mdchmod +x /usr/bin/openshift-install</code></pre><h3 id="Get-the-oc-CLI-tool"><a href="#Get-the-oc-CLI-tool" class="headerlink" title="Get the oc CLI tool:"></a>Get the oc CLI tool:</h3><pre><code>wget https://mirror.openshift.com/pub/openshift-v4/clients/ocp/${OCP_VERSION}/openshift-client-linux-${OCP_VERSION}.tar.gztar zxvf openshift-client-linux-${OCP_VERSION}.tar.gz -C /usr/binrm -f openshift-client-linux-${OCP_VERSION}.tar.gz /usr/bin/README.mdchmod +x /usr/bin/oc</code></pre><h3 id="Check-that-the-OpenShift-installer-and-CLI-are-in-usr-bin"><a href="#Check-that-the-OpenShift-installer-and-CLI-are-in-usr-bin" class="headerlink" title="Check that the OpenShift installer and CLI are in /usr/bin:"></a>Check that the OpenShift installer and CLI are in /usr/bin:</h3><p><code>ls -l /usr/bin/{oc,openshift-install}</code></p><h3 id="Set-up-bash-completion-for-the-OpenShift-CLI"><a href="#Set-up-bash-completion-for-the-OpenShift-CLI" class="headerlink" title="Set up bash completion for the OpenShift CLI:"></a>Set up bash completion for the OpenShift CLI:</h3><p><code>oc completion bash &gt;/etc/bash_completion.d/openshift</code></p><h3 id="Exit-the-super-mode-or-ctrl-D"><a href="#Exit-the-super-mode-or-ctrl-D" class="headerlink" title="Exit the super mode or ctrl+D"></a>Exit the super mode or ctrl+D</h3><p><code>exit</code></p><h3 id="Save-your-provided-AWS-credentials-to-the-HOME-aws-credentials-file"><a href="#Save-your-provided-AWS-credentials-to-the-HOME-aws-credentials-file" class="headerlink" title="Save your provided AWS credentials to the $HOME/.aws/credentials file"></a>Save your provided AWS credentials to the $HOME/.aws/credentials file</h3><pre><code>export AWSKEY=&lt;YOURACCESSKEY&gt;export AWSSECRETKEY=&lt;YOURSECRETKEY&gt;export REGION=us-east-2mkdir $HOME/.awscat &lt;&lt; EOF &gt;&gt;  $HOME/.aws/credentials[User name]aws_access_key_id = ${AWSKEY}aws_secret_access_key = ${AWSSECRETKEY}region = $REGIONEOF</code></pre><h3 id="Check-your-credentials-work"><a href="#Check-your-credentials-work" class="headerlink" title="Check your credentials work:"></a>Check your credentials work:</h3><p><code>aws sts get-caller-identity</code></p><h3 id="Copy-pull-secret"><a href="#Copy-pull-secret" class="headerlink" title="Copy pull secret:"></a>Copy pull secret:</h3><ul><li>go to <a href="https://www.openshift.com/try" target="_blank" rel="noopener">https://www.openshift.com/try</a></li><li>Click Create your Own Cluster and then Try it in the cloud</li><li>For Infrastructure Provider, click <code>AWS</code></li><li>Click Installer-Provisioned-Infrastructure</li><li>Copy Pull Secret<h3 id="Double-check"><a href="#Double-check" class="headerlink" title="Double check"></a>Double check</h3>pull secret contains credentials for all three container registries: quay.io, registry.connect.redhat.com, and registry.redhat.io as well as cloud.openshift.com.</li></ul><h3 id="Create-an-SSH-keypair-for-your-OpenShift-environment"><a href="#Create-an-SSH-keypair-for-your-OpenShift-environment" class="headerlink" title="Create an SSH keypair for your OpenShift environment:"></a>Create an SSH keypair for your OpenShift environment:</h3><p><code>ssh-keygen -f ~/.ssh/cluster-${GUID}-key -N</code></p><h2 id="Install-OpenShift-Container-Platform"><a href="#Install-OpenShift-Container-Platform" class="headerlink" title="Install OpenShift Container Platform:"></a>Install OpenShift Container Platform:</h2><h3 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h3><p>The main assets generated by the installer are the Ignition configs for the bootstrap, master, and worker machines. Given these three configs (and correctly configured infrastructure), it is possible to start an OpenShift cluster. The process for bootstrapping a cluster looks like the following:</p><ul><li><p>The bootstrap machine boots and starts hosting the remote resources required for the master machines to boot.</p></li><li><p>The master machines fetch the remote resources from the bootstrap machine and finish booting.</p></li><li><p>The master machines use the bootstrap node to form an etcd cluster.</p></li><li><p>The bootstrap node starts a temporary Kubernetes control plane using the newly created etcd cluster.</p></li><li><p>The temporary control plane schedules the production control plane to the master machines.</p></li><li><p>The temporary control plane shuts down, yielding to the production control plane.</p></li><li><p>The bootstrap node injects OpenShift-specific components into the newly formed control plane.</p></li><li><p>The installer then tears down the bootstrap node.</p></li><li><p>The result of this bootstrapping process is a fully running OpenShift cluster. The cluster will then download and configure the remaining components needed for day-to-day operation, including the creation of worker machines on supported platforms.</p></li><li><p>The installer uses a wizard approach, asking a few questions about the environment before executing the installation. If you want to avoid the wizard or run the installer from a shell script, it is useful to set up environment variables for a particular cloud platform.</p></li></ul><h3 id="Run-OpenShift-Installer"><a href="#Run-OpenShift-Installer" class="headerlink" title="Run OpenShift Installer"></a>Run OpenShift Installer</h3><pre><code>openshift-install create cluster --dir $HOME/cluster-${GUID}? SSH Public Key /home/&lt;OpenTLC User&gt;/.ssh/cluster-&lt;GUID&gt;-key.pub? Platform awsINFO Credentials loaded from the "default" profile in file "/home/&lt;OpenTLC User&gt;/.aws/credentials"? Region us-east-2 (Ohio)? Base Domain sandboxNNN.opentlc.com? Cluster Name cluster-&lt;GUID&gt;? Pull Secret [? for help] ***************************************************************************************************************************************************************</code></pre><h3 id="Custom"><a href="#Custom" class="headerlink" title="Custom"></a>Custom</h3><p>It is possible to run a multi-step installation.</p><p>Create the installation configuration:<br><code>openshift-install create install-config --dir $HOME/cluster-${GUID}</code></p><p>Update the generated install-config.yaml file—for example, change the AWS EC2 instance types.</p><p>Create the YAML manifests:<br>`openshift-install create manifests –dir $HOME/cluster-${GUID}``</p><p>Create the Ignition configuration files:<br><code>openshift-install create ignition-configs --dir $HOME/cluster-${GUID}</code></p><p>Install the cluster:<br><code>openshift-install create cluster --dir $HOME/cluster-${GUID}</code></p><p>To delete the cluster, use:<br><code>openshift-install destroy cluster --dir $HOME/cluster-${GUID}</code></p><p>Validate Cluster</p><pre><code>Set up the CLIexport KUBECONFIG=$HOME/cluster-${GUID}/auth/kubeconfigecho "export KUBECONFIG=$HOME/cluster-${GUID}/auth/kubeconfig" &gt;&gt;$HOME/.bashrcoc whoami oc get nodes oc get pod -AClean Up Cluster (Reference)</code></pre><p>Delete the cluster:<br><code>openshift-install destroy cluster --dir $HOME/cluster-${GUID}</code></p><p>Delete all of the files created by the OpenShift installer:</p><pre><code>rm -rf $HOME/.kuberm -rf $HOME/cluster-${GUID}</code></pre><p>More info: <a href="https://github.com/openshift/installer/blob/master/docs/user/aws/README.md" target="_blank" rel="noopener">Openshift Installer</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> Openshift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/07/13/hello-world/"/>
      <url>/2020/07/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
